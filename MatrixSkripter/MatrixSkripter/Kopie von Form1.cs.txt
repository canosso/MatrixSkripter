using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Drawing.Text;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO.Ports;
using System.Threading;
using System.Collections;
using System.Reflection;
using System.Web;




namespace WindowsFormsApplication1
{


    public partial class Form1 : Form
    {
        public ArrayList bitmapxarray = new ArrayList();
        public ArrayList bitmapyarray = new ArrayList();
        public ArrayList bitmapcolorarray = new ArrayList();
        public ArrayList bitmapusedcolorarray = new ArrayList();
        public ArrayList bitmapusedallcolorarray = new ArrayList();
        public int X_MAX = 31;
        public int Y_MAX = 15;
        public Random rnd = new Random();
       
        // SerialPort activeSerial = new SerialPort(serialPort1.PortName, 9600, Parity.None, 8, StopBits.One); //Change COM4 to your arduino port

        public Form1()
        {
            InitializeComponent();
            //Graphics g = pictureBox1.CreateGraphics();


        }
        private void Form1_Load(object sender, EventArgs e)
        {
            //pictureBox1.Dock = DockStyle.Fill;
            //pictureBox1.BackColor = Color.White;
            // Connect the Paint event of the PictureBox to the event handler method.
            //pictureBox1.Paint += new System.Windows.Forms.PaintEventHandler(this.pictureBox1_Paint);

            // Add the PictureBox control to the Form.this.Controls.Add(pictureBox1);

        }
        /*private void connectToArduino()
        {
            //activeSerial.Open();
            activeSerial.WriteLine("20,11,2;27,9,2;4,15,2;11,6,1;13,7,1;29,2,1;7,16,2;15,10,2;26,7,3;14,13,2;31,2,2;7,4,3;16,2,3;32,15,2;12,13,1;4,11,3;6,14,3;6,4,2;5,0,2;26,4,2;11,0,2;28,7,2;3,1,3;10,13,2;17,8,1;27,8,2;2,2,3;20,15,3;2,12,1;10,2,2;14,8,1;6,7,1;23,1,2;9,16,2;29,1,2;8,15,3;17,4,1;4,5,2;18,3,3;12,0,3;7,1,1;11,2,1;");
            //activeSerial.Close();
                   }*/
        private void SPorts_SelectedIndexChanged(object sender, EventArgs e)
        {
            serialPort1.PortName = SPorts.Text;
            serialPort1.BaudRate = 115200;
            serialPort1.Parity = Parity.None;
            serialPort1.DataBits = 8;
            serialPort1.StopBits = StopBits.One;
            serialPort1.Handshake = Handshake.None;
            serialPort1.RtsEnable = true;
            serialPort1.DtrEnable = true;
            serialPort1.ReadTimeout = 2000;
            serialPort1.WriteTimeout = 1000;
            serialPort1.Open();
        }
        private void sendtextdata_Click(object sender, EventArgs e)
        {
            if (!serialPort1.IsOpen) return;
            // int widthpixel = 0;
            // int heightpixel = 0;
            //Graphics.DrawString(textBox1.Text, new Font("Tahoma", 40), Brushes.Black, new Point(MousePosition.X, MousePosition.Y));
            //serialPort1.Write(drawingtext.Text);
            //connectToArduino();
            /* using (Bitmap bmp = new Bitmap(textBox1.Text.Length*8, 16))
             {
                 using (Graphics gfx = Graphics.FromImage((Image)bmp))
                 {
                     gfx.SmoothingMode = SmoothingMode.AntiAlias;
                     Font font = new Font("Tahoma", 11, FontStyle.Regular, GraphicsUnit.Pixel);
                     gfx.FillRectangle(Brushes.Transparent, new Rectangle(0, 0, bmp.Width, bmp.Height));
                     gfx.FillRectangle(System.Drawing.Brushes.Black, 0, 0, textBox1.Text.Length*8, 16);
                     gfx.DrawString(textBox1.Text, font, System.Drawing.Brushes.Red, 2, 3);
                     bmp.Save(Application.StartupPath + "\\" + textBox1.Text + ".bmp", ImageFormat.Bmp);
                     //return bmp;
                 }
             }*/
            try
            {
                int test = Convert.ToInt32(InputX.Text);
            }
            catch
            {
                MessageBox.Show("Please insert only numbers at Input X");
                InputX.Text = "";
                return;
            }
            try
            {
                int test = Convert.ToInt32(InputY.Text);
            }
            catch
            {
                MessageBox.Show("Please insert only numbers at Input Y");
                InputY.Text = "";
                return;
            }
            /* using (Bitmap bmp = new Bitmap(textBox1.Text.Length * 8, 16))
             {
                 using (Graphics gfx = Graphics.FromImage((Image)bmp))
                 {
                     gfx.SmoothingMode = SmoothingMode.AntiAlias;
                     Font font = new Font("Tahoma", 11, FontStyle.Regular, GraphicsUnit.Pixel);
                     gfx.FillRectangle(Brushes.Transparent, new Rectangle(0, 0, bmp.Width, bmp.Height));
                     gfx.FillRectangle(System.Drawing.Brushes.Black, 0, 0, textBox1.Text.Length * 8, 16);
                     gfx.DrawString(textBox1.Text, font, System.Drawing.Brushes.Red, 2, 3);
                     pictureBox1.Image = bmp;
                     //return bmp;
                 }
             }*/
            Bitmap flag = new Bitmap(1500, 50);


            Graphics flagGraphics = Graphics.FromImage(flag);
            /*int red = 0;
            int white = 11;
            while (white <= 100) {
                flagGraphics.FillRectangle(Brushes.Red, 0, red, 200,10);
                flagGraphics.FillRectangle(Brushes.White, 0, white, 200, 10);
                red += 20;
                white += 20;
            }*/
            flagGraphics.SmoothingMode = SmoothingMode.None;
            // Set maximum layout size.
            SizeF layoutSize = new SizeF(200.0F, 50.0F);

            // Measure string.
            SizeF stringSize = new SizeF();
            stringSize = flagGraphics.MeasureString(InputString.Text, InputString.Font, layoutSize);
            //Font font = new Font("Arial", 11, FontStyle.Bold, GraphicsUnit.Pixel);

            flagGraphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit;

            //flagGraphics.FillRectangle(Brushes.Transparent, new Rectangle(0, 0, flag.Width, flag.Height));
            flagGraphics.FillRectangle(new System.Drawing.SolidBrush(InputString.BackColor), 0, 0, stringSize.Width, stringSize.Height);
            StringFormat strFormat = new StringFormat();
            strFormat.Alignment = StringAlignment.Near;
            if (TextScrollX.Checked && (TextBackgroundColor.SelectedIndex == 0 || TextBackgroundColor.SelectedIndex == -1))
            {
                flagGraphics.DrawString(InputString.Text, InputString.Font, Brushes.Gray, 1, 0, strFormat);
            }
            if (TextScrollY.Checked && (TextBackgroundColor.SelectedIndex == 0 || TextBackgroundColor.SelectedIndex == -1))
            {
                flagGraphics.DrawString(InputString.Text, InputString.Font, Brushes.Gray, 0, 1, strFormat);
            }
            flagGraphics.DrawString(InputString.Text, InputString.Font, new System.Drawing.SolidBrush(InputString.ForeColor), 0, 0, strFormat);

            //TextRenderer.DrawText(e.Graphics, "Regular Text", font, New Point(10, 10), SystemColors.ControlText)
            //TextRenderer.DrawText(flagGraphics, textBox1.Text, font, new Point(0, 0), Color.Red);
            //flag.Save("c:\\myBitmap.bmp");
            pictureBox1.Image = flag;
            //richTextBox1.AppendText(stringSize.Width.ToString() + "," + stringSize.Height.ToString() + ",2;");
            /*System.Drawing.Bitmap flag2 = new System.Drawing.Bitmap(10, 10);
            for (int x = 0; x < flag2.Height; ++x)
                for (int y = 0; y < flag2.Width; ++y)
                    flag2.SetPixel(x, y, Color.White);
            for (int x = 0; x < flag2.Height; ++x)
                flag2.SetPixel(x, x, Color.Red);
            pictureBox1.Image = flag2;*/

            /* Bitmap image1 = new Bitmap(@"c:\\myBitmap.bmp", true);
             pictureBox1.Image = image1;*/

            //System.Threading.Thread.Sleep(3);

            /*for (int heightpixel = 0; heightpixel < image1.Height; heightpixel++)
            {
                for (int widthpixel = 0; widthpixel < image1.Width; widthpixel++)
                {
                    Color pixelColor = image1.GetPixel(widthpixel, heightpixel);

                    String PixelwertText = pixelColor.R.ToString();
                    String PixelwertAllText = pixelColor.ToString();
                    richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
                    if (image1.GetPixel(widthpixel, heightpixel) == Color.FromArgb(255, 0, 0))
                    {
                        System.Threading.Thread.Sleep(30);
                        serialPort1.Write(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
                        
                    }
                }
            }*/
            ArrayList fontxarray = new ArrayList();
            ArrayList fontyarray = new ArrayList();
            ArrayList fontcolorarray = new ArrayList();
            ArrayList ycolor = new ArrayList();
            ArrayList xcolor = new ArrayList();
            int firstxpixel = 0, firstypixel = 0, firstxcontrolpixel = 0, firstycontrolpixel = 0, lastxpixel = 0, lastypixel = 0, lastxcontrolpixel = 0, lastycontrolpixel = 0, actualxpixel = 0, actualypixel = 0;
            bool foundxpixel = false, foundypixel = false, foundlastxpixel = false, foundlastypixel = false;

            int[, ,] textpixels = new int[,,] { };

            int widthtestpixel = 0, heighttestpixel = 0;
            while (foundypixel == false)
            {

                while (widthtestpixel < stringSize.Width && foundypixel == false)
                {

                    while (heighttestpixel < stringSize.Height && foundypixel == false)
                    {

                        //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        if (flag.GetPixel(widthtestpixel, heighttestpixel) == Color.FromArgb(InputString.ForeColor.ToArgb()) && foundypixel == false)
                        {
                            firstxcontrolpixel = widthtestpixel;
                            firstypixel = heighttestpixel;
                            foundypixel = true;

                            //richTextBox1.AppendText(stringSize.Width.ToString() + "," + stringSize.Height.ToString() + ",2;");
                        }

                        heighttestpixel++;
                    }
                    widthtestpixel++;
                    heighttestpixel = 0;
                }
                widthtestpixel = 0;
            }
            widthtestpixel = 0;
            heighttestpixel = 0;
            while (foundxpixel == false)
            {



                while (heighttestpixel < stringSize.Height && foundxpixel == false)
                {
                    while (widthtestpixel < stringSize.Width && foundxpixel == false)
                    {
                        //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        if (flag.GetPixel(widthtestpixel, heighttestpixel) == Color.FromArgb(InputString.ForeColor.ToArgb()) && foundxpixel == false)
                        {

                            firstxpixel = widthtestpixel;
                            firstycontrolpixel = heighttestpixel;
                            foundxpixel = true;

                            //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
                        }

                        widthtestpixel++;
                    }
                    heighttestpixel++;
                    widthtestpixel = 0;

                }
                heighttestpixel = 0;
            }
            widthtestpixel = (int)stringSize.Width;
            heighttestpixel = (int)stringSize.Height;
            while (foundlastypixel == false)
            {

                while (widthtestpixel > 0 && foundlastypixel == false)
                {

                    while (heighttestpixel > 0 && foundlastypixel == false)
                    {

                        //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        if (flag.GetPixel(widthtestpixel, heighttestpixel) == Color.FromArgb(InputString.ForeColor.ToArgb()) && foundlastypixel == false)
                        {
                            lastxcontrolpixel = widthtestpixel;
                            lastypixel = heighttestpixel;
                            foundlastypixel = true;

                            //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        }

                        heighttestpixel--;
                    }
                    widthtestpixel--;
                    heighttestpixel = (int)stringSize.Height;
                }
                widthtestpixel = (int)stringSize.Width;
            }
            widthtestpixel = (int)stringSize.Width;
            heighttestpixel = (int)stringSize.Height;
            while (foundlastxpixel == false)
            {



                while (heighttestpixel > 0 && foundlastxpixel == false)
                {
                    while (widthtestpixel > 0 && foundlastxpixel == false)
                    {
                        //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        if (flag.GetPixel(widthtestpixel, heighttestpixel) == Color.FromArgb(InputString.ForeColor.ToArgb()) && foundlastxpixel == false)
                        {

                            lastxpixel = widthtestpixel;
                            lastycontrolpixel = heighttestpixel;
                            foundlastxpixel = true;

                            //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        }

                        widthtestpixel--;
                    }
                    heighttestpixel--;
                    widthtestpixel = (int)stringSize.Width;

                }
                heighttestpixel = (int)stringSize.Height;
            }




            /*for (int widthpixel = 0; widthpixel < stringSize.Width; widthpixel++)
            {
                for (int heightpixel = 0; heightpixel < stringSize.Height; heightpixel++)
                {
                    if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.ForeColor.ToArgb()) && foundypixel == false)
                    {
                        firstxcontrolpixel = widthpixel;
                        firstypixel = heightpixel;                        
                        foundypixel = true;
                        
                        //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
                    }
                }
            }*/

            /*for (int heightpixel = 0; heightpixel < stringSize.Height; heightpixel++)
            {
                for (int widthpixel = 0; widthpixel < stringSize.Width; widthpixel++)
                {
                    if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.ForeColor.ToArgb()) && foundxpixel == false)
                    {

                        firstxpixel = widthpixel;
                        firstycontrolpixel = heightpixel;
                        foundxpixel = true;

                        //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
                    }
                }
            }*/
            if (firstxcontrolpixel != firstxpixel && firstycontrolpixel != firstypixel)
            {
                firstxpixel = firstxcontrolpixel;
                firstypixel = firstycontrolpixel;
            }
            if (lastxcontrolpixel != lastxpixel && lastycontrolpixel != lastypixel)
            {
                lastxpixel = lastxcontrolpixel;
                lastypixel = lastycontrolpixel;
            }
            lastxpixel = lastxpixel + firstxpixel;
            lastypixel = lastypixel + firstypixel;
            //richTextBox1.AppendText(firstxpixel.ToString() + "," + firstypixel.ToString() + ",2;");
            //richTextBox1.AppendText(stringSize.Width.ToString() + "," + stringSize.Height.ToString() + ",2;");
            int textfrontcolor = 0;
            if (TextFonctColor.SelectedIndex == 0) { textfrontcolor = 0; }
            if (TextFonctColor.SelectedIndex == 1 || InputString.ForeColor == Color.Green) { textfrontcolor = 1; }
            if (TextFonctColor.SelectedIndex == 2 || InputString.ForeColor == Color.Red) { textfrontcolor = 2; }
            if (TextFonctColor.SelectedIndex == 3 || InputString.ForeColor == Color.Orange) { textfrontcolor = 3; }
            if (TextFonctColor.SelectedIndex == 4) { textfrontcolor = 4; }
            if (TextFonctColor.SelectedIndex == 5) { textfrontcolor = 5; }
            if (TextFonctColor.SelectedIndex == 6) { textfrontcolor = 6; }
            if (TextFonctColor.SelectedIndex == 7) { textfrontcolor = 7; }
            if (TextFonctColor.SelectedIndex == 8) { textfrontcolor = 8; }
            if (TextFonctColor.SelectedIndex == 9) { textfrontcolor = 9; }
            int textbackcolor = 0;
            if (TextBackgroundColor.SelectedIndex == 0) { textbackcolor = 0; }
            if (TextBackgroundColor.SelectedIndex == 1 || InputString.BackColor == Color.Green) { textbackcolor = 1; }
            if (TextBackgroundColor.SelectedIndex == 2 || InputString.BackColor == Color.Red) { textbackcolor = 2; }
            if (TextBackgroundColor.SelectedIndex == 3 || InputString.BackColor == Color.Orange) { textbackcolor = 3; }
            if (TextBackgroundColor.SelectedIndex == 4) { textbackcolor = 4; }
            if (TextBackgroundColor.SelectedIndex == 5) { textbackcolor = 5; }
            if (TextBackgroundColor.SelectedIndex == 6) { textbackcolor = 6; }
            if (TextBackgroundColor.SelectedIndex == 7) { textbackcolor = 7; }
            if (TextBackgroundColor.SelectedIndex == 8) { textbackcolor = 8; }
            if (TextBackgroundColor.SelectedIndex == 9) { textbackcolor = 9; }


            Random rnd = new Random();
            if (textfrontcolor == 5 || textbackcolor == 5)
            {
                for (int xcounter = 0; xcounter <= lastxpixel; xcounter++)
                {
                    xcolor.Add(rnd.Next(1, 4));
                }
            }
            if (textfrontcolor == 6 || textbackcolor == 6)
            {
                for (int ycounter = 0; ycounter <= lastypixel; ycounter++)
                {
                    ycolor.Add(rnd.Next(1, 4));
                }
            }

            for (int widthpixel = firstxpixel; widthpixel < lastxpixel; widthpixel++)
            {
                //if (textfrontcolor == 5) { textfrontcolor = (int)xcolor[widthpixel]; }
                //if (textbackcolor == 5) { textbackcolor = rnd.Next(1, 4); }
                for (int heightpixel = firstypixel; heightpixel < lastypixel; heightpixel++)
                {
                    /*Color pixelColor = flag.GetPixel(widthpixel, heightpixel);

                    String PixelwertText = pixelColor.R.ToString();
                    String PixelwertAllText = pixelColor.ToString();
                    richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");*/
                    if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(InputString.ForeColor.ToArgb()))
                    {
                        //System.Threading.Thread.Sleep(4);
                        //serialPort1.WriteLine(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");

                        //richTextBox1.AppendText(textBox1.ForeColor.ToString() + "," + flag.GetPixel(widthpixel, heightpixel).ToString() + ",2;");
                        //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");


                        //textpixels.Value(widthpixel, heightpixel, textfrontcolor, textpixelcounter);
                        actualxpixel = widthpixel - firstxpixel;
                        actualypixel = heightpixel - firstypixel;
                        /*String showcolor = textfrontcolor.ToString();
                        if (textfrontcolor == 2)
                        {
                            
                            showcolor = "4";
                        }*/

                        fontxarray.Add(actualxpixel);
                        fontyarray.Add(actualypixel);

                        if (textfrontcolor == 6)
                        {
                            fontcolorarray.Add(ycolor[heightpixel]);
                        }
                        else
                        {
                            fontcolorarray.Add(textfrontcolor);
                        }
                        //textbitmapstring = textbitmapstring + actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textfrontcolor.ToString() + ";";
                        //richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + showcolor + ";");
                        //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + "," + textfrontcolor.ToString() + ";");



                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
                    }
                    else
                        if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(255, Color.Gray))
                        {
                            //System.Threading.Thread.Sleep(4);
                            //serialPort1.WriteLine(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");

                            //richTextBox1.AppendText(textBox1.ForeColor.ToString() + "," + flag.GetPixel(widthpixel, heightpixel).ToString() + ",2;");
                            //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");


                            //textpixels.Value(widthpixel, heightpixel, textfrontcolor, textpixelcounter);
                            actualxpixel = widthpixel - firstxpixel;
                            actualypixel = heightpixel - firstypixel;

                            fontxarray.Add(actualxpixel);
                            fontyarray.Add(actualypixel);

                            fontcolorarray.Add(0);

                            //fontarray.Add(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";");
                            //textbitmapstring = textbitmapstring + actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";" + ";";
                            //richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";");
                            richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + "," + textfrontcolor.ToString() + ";");



                            //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
                        }

                        else
                            if (textbackcolor != 0)
                            {
                                //System.Threading.Thread.Sleep(4);
                                //serialPort1.WriteLine(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");

                                //richTextBox1.AppendText(textBox1.ForeColor.ToString() + "," + flag.GetPixel(widthpixel, heightpixel).ToString() + ",2;");
                                //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");


                                //textpixels.Value(widthpixel, heightpixel, textfrontcolor, textpixelcounter);
                                actualxpixel = widthpixel - firstxpixel;
                                actualypixel = heightpixel - firstypixel;

                                fontxarray.Add(actualxpixel);
                                fontyarray.Add(actualypixel);
                                if (textbackcolor == 6) { fontcolorarray.Add(ycolor[heightpixel]); }
                                else
                                {
                                    fontcolorarray.Add(textbackcolor);
                                }
                                //fontarray.Add(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";");
                                //textbitmapstring = textbitmapstring + actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";" + ";";
                                //richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";");
                                //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + "," + textfrontcolor.ToString() + ";");



                                //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
                            }

                }


            }

            /*for (int widthpixel = firstxpixel; widthpixel < stringSize.Width; widthpixel++)
            {
                for (int heightpixel = firstypixel; heightpixel < stringSize.Height; heightpixel++)
                {
                    /*Color pixelColor = flag.GetPixel(widthpixel, heightpixel);

                    String PixelwertText = pixelColor.R.ToString();
                    String PixelwertAllText = pixelColor.ToString();
                    richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
                    if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(255, 0, 0))
                    {
                        //System.Threading.Thread.Sleep(4);
                        //serialPort1.WriteLine(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");

                        //richTextBox1.AppendText(textBox1.ForeColor.ToString() + "," + flag.GetPixel(widthpixel, heightpixel).ToString() + ",2;");
                        //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
                        /*if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.ForeColor.ToArgb()) && foundpixel == false)
                        {
                            firstxpixel = widthpixel;
                            firstypixel = heightpixel;
                            foundpixel = true;
                            //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
                        }*/
            /* if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.ForeColor.ToArgb()))
             {
                 actualxpixel = widthpixel - firstxpixel;
                 actualypixel = heightpixel - firstypixel;
                 richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + ",2;");
             }
             else if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.BackColor.ToArgb()) && foundxpixel == true)
             {
                 actualxpixel = widthpixel - firstxpixel;
                 actualypixel = heightpixel - firstypixel;
                 richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + ",2;");
             }

             //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
         }
         if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(0, 128, 0))
         {
             //System.Threading.Thread.Sleep(24);
             //serialPort1.WriteLine(widthpixel.ToString() + "," + heightpixel.ToString() + ",1;");
             //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
             //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
           /*  if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.ForeColor.ToArgb()) && foundpixel == false)
             {
                 firstxpixel = widthpixel;
                 firstypixel = heightpixel;
                 foundpixel = true;
                 //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
             }*/
            /*  if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.ForeColor.ToArgb()))
              {

                  actualxpixel = widthpixel - firstxpixel;
                  actualypixel = heightpixel - firstypixel;
                  richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + ",1;");
              }
              else if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.BackColor.ToArgb()) && foundxpixel == true)
              {

                  actualxpixel = widthpixel - firstxpixel;
                  actualypixel = heightpixel - firstypixel;
                  richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + ",1;");
              }
          }
          if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(255, 165, 0))
          {
              //System.Threading.Thread.Sleep(24);
              //serialPort1.WriteLine(widthpixel.ToString() + "," + heightpixel.ToString() + ",3;");
              //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",3;");
              //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
             /* if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.ForeColor.ToArgb()) && foundpixel == false)
              {
                  firstxpixel = widthpixel;
                  firstypixel = heightpixel;
                  foundpixel = true;
                  //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
              }*/
            /* if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.ForeColor.ToArgb()))
             {

                 actualxpixel = widthpixel - firstxpixel;
                 actualypixel = heightpixel - firstypixel;
                 richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + ",3;");
             }
             else if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(textBox1.BackColor.ToArgb()) && foundxpixel == true)
             {

                 actualxpixel = widthpixel - firstxpixel;
                 actualypixel = heightpixel - firstypixel;
                 richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + ",3;");
             }
         }
     }


 }*/
            //richTextBox1.Text = fontarray.ToString();

            //string[] words = textbitmapstring.Split(';');

            /*foreach (Object obj in fontarray)
            {
                serialPort1.WriteLine(obj.ToString());
                richTextBox1.AppendText(obj.ToString());
            }*/
            if (TextShw.Checked)
            {

                for (int countarraylist = 0; countarraylist < fontxarray.Count; countarraylist++)
                {
                    /*byte[] actualx = new byte[] { Convert.ToByte((int)fontxarray[countarraylist] + xmove)};

                    byte[] actualy = new byte[] { Convert.ToByte((int)fontyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                    byte[] actualcolor = new byte[] { Convert.ToByte(fontcolorarray[countarraylist])};*/

                    int actualx = (int)fontxarray[countarraylist] + Convert.ToInt16(InputX.Text);

                    int actualy = (int)fontyarray[countarraylist] + Convert.ToInt16(InputY.Text);
                    serialPort1.Write(actualx.ToString());
                    serialPort1.Write(",");
                    serialPort1.Write(actualy.ToString() + ",");
                    if ((int)fontcolorarray[countarraylist] == 5) { serialPort1.Write(xcolor[(int)fontxarray[countarraylist]] + ";"); }
                    else
                    { serialPort1.Write(fontcolorarray[countarraylist] + ";"); }
                    serialPort1.ReadChar();

                    //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + ";");
                    //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + fontcolorarray[countarraylist] + "\n");
                    //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + "\n");
                    //System.Threading.Thread.Sleep(1);

                    // richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + fontcolorarray[countarraylist] + ";\n");
                }
                //serialPort1.Write("c");()

            }
            else if (TextScrollX.Checked)
            {
                for (int xmove = 31; xmove >= -lastxpixel; xmove--)
                {
                    for (int countarraylist = 0; countarraylist < fontxarray.Count; countarraylist++)
                    {
                        /*byte[] actualx = new byte[] { Convert.ToByte((int)fontxarray[countarraylist] + xmove)};

                        byte[] actualy = new byte[] { Convert.ToByte((int)fontyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                        byte[] actualcolor = new byte[] { Convert.ToByte(fontcolorarray[countarraylist])};*/

                        int actualx = (int)fontxarray[countarraylist] + xmove;

                        int actualy = (int)fontyarray[countarraylist] + Convert.ToInt16(InputY.Text);
                        serialPort1.Write(actualx.ToString());
                        serialPort1.Write(",");
                        serialPort1.Write(actualy.ToString() + ",");
                        if ((int)fontcolorarray[countarraylist] == 5) { serialPort1.Write(xcolor[(int)fontxarray[countarraylist]] + ";"); }
                        else
                        { serialPort1.Write(fontcolorarray[countarraylist] + ";"); }
                        serialPort1.ReadChar();

                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + ";");
                        //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + fontcolorarray[countarraylist] + "\n");
                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + "\n");
                        //System.Threading.Thread.Sleep(1);

                        //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + fontcolorarray[countarraylist] + ";\n");
                    }
                    //serialPort1.Write("c");()
                }
            }
            else if (TextScrollY.Checked)
            {
                for (int ymove = 15; ymove >= -lastypixel; ymove--)
                {
                    for (int countarraylist = 0; countarraylist < fontxarray.Count; countarraylist++)
                    {
                        /*byte[] actualx = new byte[] { Convert.ToByte((int)fontxarray[countarraylist] + xmove)};

                        byte[] actualy = new byte[] { Convert.ToByte((int)fontyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                        byte[] actualcolor = new byte[] { Convert.ToByte(fontcolorarray[countarraylist])};*/

                        int actualx = (int)fontxarray[countarraylist] + Convert.ToInt16(InputX.Text);

                        int actualy = (int)fontyarray[countarraylist] + ymove;
                        serialPort1.Write(actualx.ToString());
                        serialPort1.Write(",");
                        serialPort1.Write(actualy.ToString() + ",");
                        if ((int)fontcolorarray[countarraylist] == 5) { serialPort1.Write(xcolor[(int)fontxarray[countarraylist]] + ";"); }
                        else
                        { serialPort1.Write(fontcolorarray[countarraylist] + ";"); }

                        serialPort1.ReadChar();
                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + ";");
                        //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + fontcolorarray[countarraylist] + "\n");
                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + "\n");
                        //System.Threading.Thread.Sleep(1);

                        //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + fontcolorarray[countarraylist] + ";\n");
                    }
                    //serialPort1.Write("c");()
                }
            }
            /*for (int heightpixel = 0; heightpixel < flag2.Height; heightpixel++)
            {
                for (int widthpixel = 0; widthpixel < flag2.Width; widthpixel++)
                {
                    Color pixelColor = flag2.GetPixel(widthpixel, heightpixel);

                    String PixelwertText = pixelColor.R.ToString();
                    String PixelwertAllText = pixelColor.ToString();

                    if (flag2.GetPixel(widthpixel, heightpixel) == Color.FromArgb(255, 0, 0))
                    {
System.Threading.Thread.Sleep(3);
                        String SendtoArduino = widthpixel.ToString() + "," + heightpixel.ToString() + ",2;";
                        serialPort1.Write(SendtoArduino);
                        richTextBox1.AppendText(SendtoArduino);
                        //System.Threading.Thread.Sleep(3);
                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
                    }
                }
            }*/
            /* int xa = 0;
             while (xa < 1)
             {
                 int xpos = 32;
                 while (xpos > (-1 * (image1.Width)))
                 {
                     for (int i = 0; i < 1; i++)
                     {
                        for (int heightpixel = 0; heightpixel < 16; heightpixel++)
                         {
                             Color pixelColor = image1.GetPixel(xpos + (-image1.Width * i), heightpixel);
                         System.Threading.Thread.Sleep(30);
                         //String PixelwertText = pixelColor.R.ToString();
                         String PixelwertAllText = pixelColor.ToString();
                         int hpixel = heightpixel ;
                         int wpixel = xpos + (image1.Width *i)  ;
                         //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "."  + PixelwertAllText + "\n");
                         String SendtoArduino = wpixel.ToString() + "," + hpixel.ToString() + "," + PixelwertAllText.Replace("Color [A=255, R=3, G=104, B=30]", "1").Replace("Color [A=255, R=252, G=206, B=4]", "3").Replace("Color [A=255, R=205, G=65, B=12]", "2") + ";";
                         serialPort1.Write(SendtoArduino);
                         richTextBox1.AppendText(SendtoArduino);
                        }
                        
                     }
                      System.Threading.Thread.Sleep(30);// reduce speed of scroll
                     xpos--;
                 }
                 xa = 1;
             }*/
            /*int scrollxcounter = 0;
            int scrollxpixel= 0;
            for (int scrollypixel = 1; scrollypixel < 6; scrollypixel++)
            {

                for (int widthpixel = 0; widthpixel < image1.Width; widthpixel++)
                {

                    //for (int scrollxpixel = 0; scrollxpixel < 31; scrollxpixel++)                {
                    for (int heightpixel = 0; heightpixel < 16; heightpixel++)
                    {



                        Color pixelColor = image1.GetPixel(widthpixel, heightpixel * scrollypixel);
                        System.Threading.Thread.Sleep(25);
                        //String PixelwertText = pixelColor.R.ToString();
                        String PixelwertAllText = pixelColor.ToString();
                        int hpixel = heightpixel;
                        int wpixel = widthpixel - scrollxpixel;
                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "."  + PixelwertAllText + "\n");
                        String SendtoArduino = wpixel.ToString() + "," + hpixel.ToString() + "," + PixelwertAllText.Replace("Color [A=255, R=3, G=104, B=30]", "1").Replace("Color [A=255, R=252, G=206, B=4]", "3").Replace("Color [A=255, R=205, G=65, B=12]", "2") + ";";
                        serialPort1.Write(SendtoArduino);
                        richTextBox1.AppendText(SendtoArduino);

                        //}
                        //System.Threading.Thread.Sleep(30);

                    }
                    if ((widthpixel % 32) == 0)
                    {
                        scrollxcounter = widthpixel / 32;
                        scrollxpixel = scrollxcounter * 32;
                    }
                }
            }*/
            /*for (int scrollxpixel = 0; scrollxpixel < 31; scrollxpixel--)
            {  
                    for (int widthpixel = 0; widthpixel <32; widthpixel++)
                    {
                        for (int heightpixel = 0; heightpixel < 16; heightpixel++)
                        {
              
                                                

                                  Color pixelColor = image1.GetPixel(widthpixel * scrollxpixel, heightpixel);
                        System.Threading.Thread.Sleep(30);
                        //String PixelwertText = pixelColor.R.ToString();
                        String PixelwertAllText = pixelColor.ToString();
                        int hpixel = heightpixel ;
                        int wpixel = widthpixel  ;
                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "."  + PixelwertAllText + "\n");
                        String SendtoArduino = wpixel.ToString() + "," + hpixel.ToString() + "," + PixelwertAllText.Replace("Color [A=255, R=3, G=104, B=30]", "1").Replace("Color [A=255, R=252, G=206, B=4]", "3").Replace("Color [A=255, R=205, G=65, B=12]", "2") + ";";
                        serialPort1.Write(SendtoArduino);
                        richTextBox1.AppendText(SendtoArduino);
                        
                    }
                        
                }
                        System.Threading.Thread.Sleep(100);
            }*/

            /* while (widthpixel <= textBox1.Text.Length * 8)
             {
                 while (heightpixel <= 16)
                 {
                     Color pixelColor =flag.GetPixel(widthpixel, heightpixel);
                     String PixelwertText = pixelColor.ToString();
                    /* if (PixelwertText != "Red")
                     {
                         serialPort1.Write(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
                     }
                     richTextBox1.Text = widthpixel.ToString();
                     //flagGraphics.DrawString(PixelwertText, font, System.Drawing.Brushes.Red, 10, 20);
                 }
             }*/
        }

        private void clearmatrix_Click(object sender, EventArgs e)
        {
            //drawingtext.Text = "c";
            if (!serialPort1.IsOpen) return;
            serialPort1.Write("c");
            richTextBox1.Text = "";
            //connectToArduino();

        }

        /*  private void pictureBox1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
          {
              /* // Create a local version of the graphics object for the PictureBox.
               Graphics g = e.Graphics;

               // Draw a string on the PictureBox.
               g.DrawString("This is a diagonal line drawn on the control",
                   new Font("Arial", 10), System.Drawing.Brushes.Blue, new Point(30, 30));
               // Draw a line in the PictureBox.
               g.DrawLine(System.Drawing.Pens.Red, pictureBox1.Left, pictureBox1.Top,
                   pictureBox1.Right, pictureBox1.Bottom);*/
        //  }

        /// <summary>
        /// Function for converting text to a Bitmap object
        /// </summary>
        /// <param name="width">Width of the image</param>
        /// <param name="height">Height of the image</param>
        /// <param name="str">String to be converted</param>
        /// <param name="textColor">Color we want the text</param>
        /// <param name="recColor">Color we want the background</param>
        /// <param name="f">Name of the font we want used</param>
        /// <returns></returns>
        /// <remarks></remarks>
        /*public Bitmap ConvertTextToBitmap(ref int width, ref int height, ref string str, ref Color textColor, ref Brush recColor, ref string fontName)
        {
            using (Bitmap bmp = new Bitmap(width, height))
            {
                using (Graphics gfx = Graphics.FromImage((Image)bmp))
                {
                    gfx.SmoothingMode = SmoothingMode.AntiAlias;
                    Font font = new Font(fontName, 11, FontStyle.Regular, GraphicsUnit.Pixel);
                    gfx.FillRectangle(Brushes.Transparent, new Rectangle(0, 0, bmp.Width, bmp.Height));
                    gfx.FillRectangle(recColor, 0, 0, width, height);
                    gfx.DrawString(str, font, new SolidBrush(textColor), 2, 3);
                    bmp.Save(Application.StartupPath + "\\" + str + ".bmp", ImageFormat.Bmp);
                    return bmp;
                }
            }
        }


        /* private void pictureBox1_Paint(object sender, PaintEventArgs e)
         {

             using (Font myFont = new Font("Arial", 14))
             {
                 e.Graphics.DrawString("Hello .NET Guide!", myFont, Brushes.Green, new Point(2, 2));
             }
         }*/








        private void SelectFont_Click(object sender, EventArgs e)
        {

            fontDialog1.ShowColor = true;

            fontDialog1.Font = InputString.Font;
            fontDialog1.Color = InputString.ForeColor;

            if (fontDialog1.ShowDialog() != DialogResult.Cancel)
            {
                InputString.Font = fontDialog1.Font;
                InputString.ForeColor = fontDialog1.Color;
            }
        }









        private void TextFonctColor_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (TextFonctColor.SelectedIndex == 1)
            {
                InputString.ForeColor = Color.Green;
            }
            else if (TextFonctColor.SelectedIndex == 2)
            {
                InputString.ForeColor = Color.Red;
            }
            else if (TextFonctColor.SelectedIndex == 3)
            {
                InputString.ForeColor = Color.Orange;
            }
            else if (TextFonctColor.SelectedIndex == 0)
            {
                InputString.ForeColor = Color.Black;
            }



        }

        private void TextBackgroundColor_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (TextBackgroundColor.SelectedIndex == 1)
            {
                InputString.BackColor = Color.Green;
            }
            else if (TextBackgroundColor.SelectedIndex == 2)
            {
                InputString.BackColor = Color.Red;
            }
            else if (TextBackgroundColor.SelectedIndex == 3)
            {
                InputString.BackColor = Color.Orange;
            }
            else if (TextBackgroundColor.SelectedIndex == 0)
            {
                InputString.BackColor = Color.Black;
            }

        }

        private void Bitmapopener_Click(object sender, EventArgs e)
        {

            bitmapxarray.Clear();
            bitmapyarray.Clear();
            bitmapcolorarray.Clear();
            bitmapusedcolorarray.Clear();
            bitmapusedallcolorarray.Clear();
            openFileDialog1.Filter = "JPG Image (*.jpg, *.jpeg, *.jpe, *.jfif)|*.jpg;*.jpeg;*.jpe;*.jfif|Bitmap Image|*.bmp|Gif Image (*.gif)|*.gif|PNG Files (*.png)|*.png|All Files|*.*";
            openFileDialog1.FileName = "";
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {


                //pictureBox1.Image = Image.FromFile(openFileDialog1.FileName,true);
                Bitmap image1 = new Bitmap(openFileDialog1.FileName, true);
                image1.RotateFlip(RotateFlipType.Rotate90FlipX);
                pictureBox1.Image = image1;


                //for (int scrollxpixel = 0; scrollxpixel < 31; scrollxpixel++)                {
                for (int heightpixel = 0; heightpixel < image1.Height; heightpixel++)
                {

                    for (int widthpixel = 0; widthpixel < image1.Width; widthpixel++)
                    {

                        Color pixelColor = image1.GetPixel(widthpixel, heightpixel);
                        //System.Threading.Thread.Sleep(25);
                        //String PixelwertText = pixelColor.R.ToString();
                        String PixelwertAllText = pixelColor.ToString();
                        //int hpixel = heightpixel;
                        //int wpixel = widthpixel;
                        bitmapxarray.Add(heightpixel);
                        bitmapyarray.Add(widthpixel);
                        bitmapcolorarray.Add(PixelwertAllText);
                        bitmapusedcolorarray.Add(PixelwertAllText);
                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "."  + PixelwertAllText + "\n");
                        //String SendtoArduino = wpixel.ToString() + "," + hpixel.ToString() + "," + PixelwertAllText.Replace("Color [A=255, R=3, G=104, B=30]", "1").Replace("Color [A=255, R=252, G=206, B=4]", "3").Replace("Color [A=255, R=205, G=65, B=12]", "2") + ";";
                        //serialPort1.Write(SendtoArduino);
                        //richTextBox1.AppendText(SendtoArduino);

                        //}
                        //System.Threading.Thread.Sleep(30);

                    }

                }
                bitmapusedcolorarray.Sort();
                String oldcolortext = "", actualcolortext = "";
                int usedcolors = 0;

                for (int countarraylist = 0; countarraylist < bitmapusedcolorarray.Count; countarraylist++)
                {
                    actualcolortext = bitmapusedcolorarray[countarraylist].ToString();
                    if (oldcolortext != actualcolortext)
                    {
                        //BitmapColor1.Items.Add(bitmapusedcolorarray[countarraylist]);
                        string[] oldcolortextdifferent = actualcolortext.Split(',');
                        switch (usedcolors)
                        {
                            case 0:
                                cl0label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 1:
                                cl1label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 2:
                                cl2label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 3:
                                cl3label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;

                            case 4:
                                cl4label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 5:
                                cl5label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 6:
                                cl6label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 7:
                                cl7label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 8:
                                cl8label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 9:
                                cl9label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                        }
                        oldcolortext = bitmapusedcolorarray[countarraylist].ToString();
                        usedcolors = usedcolors + 1;
                        bitmapusedallcolorarray.Add(bitmapusedcolorarray[countarraylist]);
                        richTextBox1.AppendText(bitmapusedcolorarray[countarraylist].ToString());
                        /*BitmapColor2.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapColor5.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapOrange.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapColor3.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapRandomColumnColor.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapRandomLineColor.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapRandomRedGreen.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapColor4.Items.Add(bitmapusedcolorarray[countarraylist]);
                      */
                        //richTextBox1.AppendText(oldcolortextdifferent[1].Replace(" R=", "") + " " + oldcolortextdifferent[2].Replace(" G=", "") + " " + oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "") + "\n");

                    }
                }
                if (bitmapusedallcolorarray.Count < 10)
                {
                    for (int countarraylist = bitmapusedallcolorarray.Count; countarraylist < 10; countarraylist++)
                    {
                        bitmapusedallcolorarray.Add("Color [A=255, R=255, G=255, B=255]");
                    }
                }


            }
        }

        private void sendbitmapdata_Click(object sender, EventArgs e)
        {
            if (!serialPort1.IsOpen) return;
            try
            {
                int test = Convert.ToInt32(InputX.Text);
            }
            catch
            {
                MessageBox.Show("Please insert only numbers at Input X");
                InputX.Text = "";
                return;
            }
            try
            {
                int test = Convert.ToInt32(InputY.Text);
            }
            catch
            {
                MessageBox.Show("Please insert only numbers at Input Y");
                InputY.Text = "";
                return;
            }
            if (BitmapColor0.SelectedIndex == -1 && BitmapColor1.SelectedIndex == -1 && BitmapColor2.SelectedIndex == -1 && BitmapColor3.SelectedIndex == -1 && BitmapColor4.SelectedIndex == -1 && BitmapColor5.SelectedIndex == -1 && BitmapColor6.SelectedIndex == -1 && BitmapColor7.SelectedIndex == -1 && BitmapColor8.SelectedIndex == -1 && BitmapColor9.SelectedIndex == -1)
            {
                MessageBox.Show("Please match the bitmap colors to the colors you want to display on the matrix");

                return;
            }

            if (BitmapShw.Checked)
            {

                for (int countarraylist = 0; countarraylist < bitmapxarray.Count; countarraylist++)
                {
                    /*byte[] actualx = new byte[] { Convert.ToByte((int)bitmapxarray[countarraylist] + xmove)};

                    byte[] actualy = new byte[] { Convert.ToByte((int)bitmapyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                    byte[] actualcolor = new byte[] { Convert.ToByte(bitmapcolorarray[countarraylist])};*/
                    int actualcolor = 0;
                    int actualx = (int)bitmapxarray[countarraylist] + Convert.ToInt16(InputX.Text);

                    int actualy = (int)bitmapyarray[countarraylist] + Convert.ToInt16(InputY.Text);
                    if (actualx >= 0 && actualx < 32 && actualy >= 0 && actualy < 16)
                    {
                        serialPort1.Write(actualx.ToString());
                        serialPort1.Write(",");
                        serialPort1.Write(actualy.ToString() + ",");
                        if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[0].ToString() && BitmapColor0.SelectedIndex != -1)
                        {
                            serialPort1.Write(BitmapColor0.SelectedIndex + ";");
                            actualcolor = BitmapColor0.SelectedIndex;

                        }
                        else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[1].ToString() && BitmapColor1.SelectedIndex != -1)
                        {
                            serialPort1.Write(BitmapColor1.SelectedIndex + ";");
                            actualcolor = BitmapColor1.SelectedIndex;
                        }
                        else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[2].ToString() && BitmapColor2.SelectedIndex != -1)
                        {
                            serialPort1.Write(BitmapColor2.SelectedIndex + ";");
                            actualcolor = BitmapColor2.SelectedIndex;
                        }
                        else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[3].ToString() && BitmapColor3.SelectedIndex != -1)
                        {
                            serialPort1.Write(BitmapColor3.SelectedIndex + ";");
                            //actualcolor = 1;
                        }
                        else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[4].ToString() && BitmapColor4.SelectedIndex != -1)
                        {
                            serialPort1.Write(BitmapColor4.SelectedIndex + ";");
                            //actualcolor = 1;
                        }
                        else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[5].ToString() && BitmapColor5.SelectedIndex != -1)
                        {
                            serialPort1.Write(BitmapColor5.SelectedIndex + ";");
                            //actualcolor = 1;
                        }
                        else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[6].ToString() && BitmapColor6.SelectedIndex != -1)
                        {
                            serialPort1.Write(BitmapColor6.SelectedIndex + ";");
                            //actualcolor = 1;
                        }
                        else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[7].ToString() && BitmapColor7.SelectedIndex != -1)
                        {
                            serialPort1.Write(BitmapColor7.SelectedIndex + ";");
                            actualcolor = BitmapColor7.SelectedIndex;
                        }
                        else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[8].ToString() && BitmapColor8.SelectedIndex != -1)
                        {
                            serialPort1.Write(BitmapColor8.SelectedIndex + ";");
                            actualcolor = BitmapColor8.SelectedIndex;
                        }
                        else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[9].ToString() && BitmapColor9.SelectedIndex != -1)
                        {
                            serialPort1.Write(BitmapColor9.SelectedIndex + ";");
                            actualcolor = BitmapColor9.SelectedIndex;
                        }

                        //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + actualcolor.ToString() + ";\n");
                    }
                    /*  if ((int)bitmapcolorarray[countarraylist] == 5) { serialPort1.Write(xcolor[(int)bitmapxarray[countarraylist]] + ";"); }
                      else
                      { serialPort1.Write(bitmapcolorarray[countarraylist] + ";"); }*/


                    //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + ";");
                    //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + bitmapcolorarray[countarraylist] + "\n");
                    //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + "\n");
                    //System.Threading.Thread.Sleep(1);

                    // richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + bitmapcolorarray[countarraylist] + ";\n");
                }
                //serialPort1.Write("c");()

            }
            else if (BitmapScrollX.Checked)
            {
                for (int xmove = 31; xmove >= -34; xmove--)
                {
                    for (int countarraylist = 0; countarraylist < bitmapxarray.Count; countarraylist++)
                    {
                        /*byte[] actualx = new byte[] { Convert.ToByte((int)bitmapxarray[countarraylist] + xmove)};

                        byte[] actualy = new byte[] { Convert.ToByte((int)bitmapyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                        byte[] actualcolor = new byte[] { Convert.ToByte(bitmapcolorarray[countarraylist])};*/

                        int actualx = (int)bitmapxarray[countarraylist] + xmove;

                        int actualy = (int)bitmapyarray[countarraylist] + Convert.ToInt16(InputY.Text);
                        if (actualx >= 0 && actualx < 32 && actualy >= 0 && actualy < 16)
                        {
                            serialPort1.Write(actualx.ToString());
                            serialPort1.Write(",");
                            serialPort1.Write(actualy.ToString() + ",");
                            if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[0].ToString() && BitmapColor0.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor0.SelectedIndex + ";");


                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[1].ToString() && BitmapColor1.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor1.SelectedIndex + ";");

                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[2].ToString() && BitmapColor2.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor2.SelectedIndex + ";");

                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[3].ToString() && BitmapColor3.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor3.SelectedIndex + ";");
                                //actualcolor = 1;
                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[4].ToString() && BitmapColor4.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor4.SelectedIndex + ";");
                                //actualcolor = 1;
                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[5].ToString() && BitmapColor5.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor5.SelectedIndex + ";");
                                //actualcolor = 1;
                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[6].ToString() && BitmapColor6.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor6.SelectedIndex + ";");
                                //actualcolor = 1;
                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[7].ToString() && BitmapColor7.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor7.SelectedIndex + ";");

                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[8].ToString() && BitmapColor8.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor8.SelectedIndex + ";");

                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[9].ToString() && BitmapColor9.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor9.SelectedIndex + ";");

                            }

                            //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + actualcolor.ToString() + ";\n");
                        }
                        /* if ((int)bitmapcolorarray[countarraylist] == 5) { serialPort1.Write(xcolor[(int)bitmapxarray[countarraylist]] + ";"); }
                         else
                         { serialPort1.Write(bitmapcolorarray[countarraylist] + ";"); }*/


                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + ";");
                        //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + bitmapcolorarray[countarraylist] + "\n");
                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + "\n");
                        //System.Threading.Thread.Sleep(1);

                        //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + bitmapcolorarray[countarraylist] + ";\n");
                    }
                    //serialPort1.Write("c");()
                }
            }
            else if (BitmapScrollY.Checked)
            {
                for (int ymove = 15; ymove >= -34; ymove--)
                {
                    for (int countarraylist = 0; countarraylist < bitmapxarray.Count; countarraylist++)
                    {
                        /*byte[] actualx = new byte[] { Convert.ToByte((int)bitmapxarray[countarraylist] + xmove)};

                        byte[] actualy = new byte[] { Convert.ToByte((int)bitmapyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                        byte[] actualcolor = new byte[] { Convert.ToByte(bitmapcolorarray[countarraylist])};*/

                        int actualx = (int)bitmapxarray[countarraylist] + Convert.ToInt16(InputX.Text);

                        int actualy = (int)bitmapyarray[countarraylist] + ymove;
                        if (actualx >= 0 && actualx < 32 && actualy >= 0 && actualy < 16)
                        {
                            serialPort1.Write(actualx.ToString());
                            serialPort1.Write(",");
                            serialPort1.Write(actualy.ToString() + ",");
                            if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[0].ToString() && BitmapColor0.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor0.SelectedIndex + ";");


                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[1].ToString() && BitmapColor1.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor1.SelectedIndex + ";");

                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[2].ToString() && BitmapColor2.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor2.SelectedIndex + ";");

                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[3].ToString() && BitmapColor3.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor3.SelectedIndex + ";");
                                //actualcolor = 1;
                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[4].ToString() && BitmapColor4.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor4.SelectedIndex + ";");
                                //actualcolor = 1;
                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[5].ToString() && BitmapColor5.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor5.SelectedIndex + ";");
                                //actualcolor = 1;
                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[6].ToString() && BitmapColor6.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor6.SelectedIndex + ";");
                                //actualcolor = 1;
                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[7].ToString() && BitmapColor7.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor7.SelectedIndex + ";");

                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[8].ToString() && BitmapColor8.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor8.SelectedIndex + ";");

                            }
                            else if (bitmapcolorarray[countarraylist].ToString() == bitmapusedallcolorarray[9].ToString() && BitmapColor9.SelectedIndex != -1)
                            {
                                serialPort1.Write(BitmapColor9.SelectedIndex + ";");

                            }
                        }
                        /*  if ((int)bitmapcolorarray[countarraylist] == 5) { serialPort1.Write(xcolor[(int)bitmapxarray[countarraylist]] + ";"); }
                          else
                          { serialPort1.Write(bitmapcolorarray[countarraylist] + ";"); }*/


                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + ";");
                        //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + bitmapcolorarray[countarraylist] + "\n");
                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + "\n");
                        //System.Threading.Thread.Sleep(1);

                        //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + bitmapcolorarray[countarraylist] + ";\n");
                    }
                    //serialPort1.Write("c");()
                }
            }

        }

        private void sendtext2_Click(object sender, EventArgs e)
        {
            if (!serialPort1.IsOpen) return;

            try
            {
                int test = Convert.ToInt32(InputX.Text);
            }
            catch
            {
                MessageBox.Show("Please insert only numbers at Input X");
                InputX.Text = "";
                return;
            }
            try
            {
                int test = Convert.ToInt32(InputY.Text);
            }
            catch
            {
                MessageBox.Show("Please insert only numbers at Input Y");
                InputY.Text = "";
                return;
            }

            Bitmap flag = new Bitmap(1500, 50);


            Graphics flagGraphics = Graphics.FromImage(flag);

            flagGraphics.SmoothingMode = SmoothingMode.None;
            // Set maximum layout size.
            SizeF layoutSize = new SizeF(200.0F, 50.0F);

            // Measure string.
            SizeF stringSize = new SizeF();
            stringSize = flagGraphics.MeasureString(InputString.Text, InputString.Font, layoutSize);


            flagGraphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit;


            flagGraphics.FillRectangle(new System.Drawing.SolidBrush(InputString.BackColor), 0, 0, stringSize.Width, stringSize.Height);
            StringFormat strFormat = new StringFormat();
            strFormat.Alignment = StringAlignment.Near;
            /*if (TextScrollX.Checked && (TextBackgroundColor.SelectedIndex == 0 || TextBackgroundColor.SelectedIndex == -1))
            {
                flagGraphics.DrawString(InputString.Text, InputString.Font, Brushes.Gray, 1, 0, strFormat);
            }
            if (TextScrollY.Checked && (TextBackgroundColor.SelectedIndex == 0 || TextBackgroundColor.SelectedIndex == -1))
            {
                flagGraphics.DrawString(InputString.Text, InputString.Font, Brushes.Gray, 0, 1, strFormat);
            }*/
            flagGraphics.DrawString(InputString.Text, InputString.Font, new System.Drawing.SolidBrush(InputString.ForeColor), 0, 0, strFormat);


            pictureBox1.Image = flag;

            ArrayList fontallarray = new ArrayList();
            String colorstring = "";
            ArrayList ycolor = new ArrayList();
            ArrayList xcolor = new ArrayList();
            int firstxpixel = 0, firstypixel = 0, firstxcontrolpixel = 0, firstycontrolpixel = 0, lastxpixel = 0, lastypixel = 0, lastxcontrolpixel = 0, lastycontrolpixel = 0, actualxpixel = 0, actualypixel = 0;
            bool foundxpixel = false, foundypixel = false, foundlastxpixel = false, foundlastypixel = false;

            // int[, ,] textpixels = new int[,,] { };

            int widthtestpixel = 0, heighttestpixel = 0;
            while (foundypixel == false)
            {

                while (widthtestpixel < stringSize.Width && foundypixel == false)
                {

                    while (heighttestpixel < stringSize.Height && foundypixel == false)
                    {

                        //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        if (flag.GetPixel(widthtestpixel, heighttestpixel) == Color.FromArgb(InputString.ForeColor.ToArgb()) && foundypixel == false)
                        {
                            firstxcontrolpixel = widthtestpixel;
                            firstypixel = heighttestpixel;
                            foundypixel = true;

                            //richTextBox1.AppendText(stringSize.Width.ToString() + "," + stringSize.Height.ToString() + ",2;");
                        }

                        heighttestpixel++;
                    }
                    widthtestpixel++;
                    heighttestpixel = 0;
                }
                widthtestpixel = 0;
            }
            widthtestpixel = 0;
            heighttestpixel = 0;
            while (foundxpixel == false)
            {



                while (heighttestpixel < stringSize.Height && foundxpixel == false)
                {
                    while (widthtestpixel < stringSize.Width && foundxpixel == false)
                    {
                        //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        if (flag.GetPixel(widthtestpixel, heighttestpixel) == Color.FromArgb(InputString.ForeColor.ToArgb()) && foundxpixel == false)
                        {

                            firstxpixel = widthtestpixel;
                            firstycontrolpixel = heighttestpixel;
                            foundxpixel = true;

                            //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
                        }

                        widthtestpixel++;
                    }
                    heighttestpixel++;
                    widthtestpixel = 0;

                }
                heighttestpixel = 0;
            }
            widthtestpixel = (int)stringSize.Width;
            heighttestpixel = (int)stringSize.Height;
            while (foundlastypixel == false)
            {

                while (widthtestpixel > 0 && foundlastypixel == false)
                {

                    while (heighttestpixel > 0 && foundlastypixel == false)
                    {

                        //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        if (flag.GetPixel(widthtestpixel, heighttestpixel) == Color.FromArgb(InputString.ForeColor.ToArgb()) && foundlastypixel == false)
                        {
                            lastxcontrolpixel = widthtestpixel;
                            lastypixel = heighttestpixel;
                            foundlastypixel = true;

                            //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        }

                        heighttestpixel--;
                    }
                    widthtestpixel--;
                    heighttestpixel = (int)stringSize.Height;
                }
                widthtestpixel = (int)stringSize.Width;
            }
            widthtestpixel = (int)stringSize.Width;
            heighttestpixel = (int)stringSize.Height;
            while (foundlastxpixel == false)
            {



                while (heighttestpixel > 0 && foundlastxpixel == false)
                {
                    while (widthtestpixel > 0 && foundlastxpixel == false)
                    {
                        //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        if (flag.GetPixel(widthtestpixel, heighttestpixel) == Color.FromArgb(InputString.ForeColor.ToArgb()) && foundlastxpixel == false)
                        {

                            lastxpixel = widthtestpixel;
                            lastycontrolpixel = heighttestpixel;
                            foundlastxpixel = true;

                            //richTextBox1.AppendText(widthtestpixel.ToString() + "," + heighttestpixel.ToString() + ",2;");
                        }

                        widthtestpixel--;
                    }
                    heighttestpixel--;
                    widthtestpixel = (int)stringSize.Width;

                }
                heighttestpixel = (int)stringSize.Height;
            }




            if (firstxcontrolpixel != firstxpixel && firstycontrolpixel != firstypixel)
            {
                firstxpixel = firstxcontrolpixel;
                firstypixel = firstycontrolpixel;
            }
            if (lastxcontrolpixel != lastxpixel && lastycontrolpixel != lastypixel)
            {
                lastxpixel = lastxcontrolpixel;
                lastypixel = lastycontrolpixel;
            }
            lastxpixel = lastxpixel + firstxpixel;
            lastypixel = lastypixel + firstypixel;
            //richTextBox1.AppendText(firstxpixel.ToString() + "," + firstypixel.ToString() + ",2;");
            //richTextBox1.AppendText(stringSize.Width.ToString() + "," + stringSize.Height.ToString() + ",2;");
            int textfrontcolor = 0;
            if (TextFonctColor.SelectedIndex == 0) { textfrontcolor = 0; }
            if (TextFonctColor.SelectedIndex == 1 || InputString.ForeColor == Color.Green) { textfrontcolor = 1; }
            if (TextFonctColor.SelectedIndex == 2 || InputString.ForeColor == Color.Red) { textfrontcolor = 2; }
            if (TextFonctColor.SelectedIndex == 3 || InputString.ForeColor == Color.Orange) { textfrontcolor = 3; }
            if (TextFonctColor.SelectedIndex == 4) { textfrontcolor = 4; }
            if (TextFonctColor.SelectedIndex == 5) { textfrontcolor = 5; }
            if (TextFonctColor.SelectedIndex == 6) { textfrontcolor = 6; }
            if (TextFonctColor.SelectedIndex == 7) { textfrontcolor = 7; }
            if (TextFonctColor.SelectedIndex == 8) { textfrontcolor = 8; }
            if (TextFonctColor.SelectedIndex == 9) { textfrontcolor = 9; }

            int textbackcolor = 0;
            if (TextBackgroundColor.SelectedIndex == 0) { textbackcolor = 0; }
            if (TextBackgroundColor.SelectedIndex == 1 || InputString.BackColor == Color.Green) { textbackcolor = 1; }
            if (TextBackgroundColor.SelectedIndex == 2 || InputString.BackColor == Color.Red) { textbackcolor = 2; }
            if (TextBackgroundColor.SelectedIndex == 3 || InputString.BackColor == Color.Orange) { textbackcolor = 3; }
            if (TextBackgroundColor.SelectedIndex == 4) { textbackcolor = 4; }
            if (TextBackgroundColor.SelectedIndex == 5) { textbackcolor = 5; }
            if (TextBackgroundColor.SelectedIndex == 6) { textbackcolor = 6; }
            if (TextBackgroundColor.SelectedIndex == 7) { textbackcolor = 7; }
            if (TextBackgroundColor.SelectedIndex == 8) { textbackcolor = 8; }
            if (TextBackgroundColor.SelectedIndex == 9) { textbackcolor = 9; }



            Random rnd = new Random();
            /*if (textfrontcolor == 6 || textbackcolor == 6)
            {
                for (int xcounter = 0; xcounter <= lastxpixel; xcounter++)
                {
                    xcolor.Add(rnd.Next(1, 4));
                }
            }*/
            if (textfrontcolor == 7 || textbackcolor == 7)
            {
                for (int ycounter = 0; ycounter <= lastypixel; ycounter++)
                {
                    ycolor.Add(rnd.Next(1, 4));
                }
            }

            for (int widthpixel = firstxpixel; widthpixel < lastxpixel; widthpixel++)
            {
                for (int heightpixel = firstypixel; heightpixel < lastypixel; heightpixel++)
                {
                    if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(InputString.ForeColor.ToArgb()))
                    {
                        //System.Threading.Thread.Sleep(4);
                        //serialPort1.WriteLine(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");

                        //richTextBox1.AppendText(textBox1.ForeColor.ToString() + "," + flag.GetPixel(widthpixel, heightpixel).ToString() + ",2;");
                        //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");


                        //textpixels.Value(widthpixel, heightpixel, textfrontcolor, textpixelcounter);
                        actualxpixel = widthpixel - firstxpixel;
                        actualypixel = heightpixel - firstypixel;
                        /*String showcolor = textfrontcolor.ToString();
                        if (textfrontcolor == 2)
                        {
                            
                            showcolor = "4";
                        }*/



                        if (textfrontcolor == 7)
                        {
                            //fontallarray.Add(actualxpixel.ToString()+","+actualypixel.ToString()+","+ ycolor[heightpixel].ToString());
                            colorstring = colorstring + ycolor[heightpixel].ToString();
                        }
                        else
                        {
                            //fontallarray.Add(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textfrontcolor.ToString());
                            colorstring = colorstring + textfrontcolor.ToString();
                        }


                        //textbitmapstring = textbitmapstring + actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textfrontcolor.ToString() + ";";
                        //richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + showcolor + ";");
                        //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + "," + textfrontcolor.ToString() + ";");



                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
                    }
                    /* else
                         if (flag.GetPixel(widthpixel, heightpixel) == Color.FromArgb(255, Color.Gray))
                         {
                             //System.Threading.Thread.Sleep(4);
                             //serialPort1.WriteLine(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");

                             //richTextBox1.AppendText(textBox1.ForeColor.ToString() + "," + flag.GetPixel(widthpixel, heightpixel).ToString() + ",2;");
                             //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");


                             //textpixels.Value(widthpixel, heightpixel, textfrontcolor, textpixelcounter);
                             actualxpixel = widthpixel - firstxpixel;
                             actualypixel = heightpixel - firstypixel;

                             fontallarray.Add(actualxpixel.ToString() + "," + actualypixel.ToString() + ",0");

                             //fontarray.Add(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";");
                             //textbitmapstring = textbitmapstring + actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";" + ";";
                             //richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";");
                             //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + "," + textfrontcolor.ToString() + ";");



                             //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
                         }*/

                    else
                    {
                        //System.Threading.Thread.Sleep(4);
                        //serialPort1.WriteLine(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");

                        //richTextBox1.AppendText(textBox1.ForeColor.ToString() + "," + flag.GetPixel(widthpixel, heightpixel).ToString() + ",2;");
                        //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");


                        //textpixels.Value(widthpixel, heightpixel, textfrontcolor, textpixelcounter);
                        actualxpixel = widthpixel - firstxpixel;
                        actualypixel = heightpixel - firstypixel;


                        if (textbackcolor == 7)
                        {
                            colorstring = colorstring + ycolor[heightpixel].ToString();
                            //fontallarray.Add(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + ycolor[heightpixel].ToString());
                        }
                        else
                        {
                            colorstring = colorstring + textbackcolor.ToString();
                            // fontallarray.Add(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString());
                        }
                        //fontarray.Add(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";");
                        //textbitmapstring = textbitmapstring + actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";" + ";";
                        //richTextBox1.AppendText(actualxpixel.ToString() + "," + actualypixel.ToString() + "," + textbackcolor.ToString() + ";");
                        //richTextBox1.AppendText(widthpixel.ToString() + "," + heightpixel.ToString() + "," + textfrontcolor.ToString() + ";");



                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
                    }

                }
                fontallarray.Add(colorstring);
                //richTextBox1.AppendText(colorstring + "\n");
                colorstring = "";

            }
            int startcolumn = 0, endcolumn = X_MAX;




            int randomcolor = rnd.Next(1, 4);
            if (TextShw.Checked)
            {
                if ((Convert.ToInt16(InputX.Text) + X_MAX + 1) >= fontallarray.Count)
                {
                    endcolumn = fontallarray.Count;
                }
                else
                {
                    endcolumn = -Convert.ToInt16(InputX.Text) + X_MAX + 1;
                }
                for (int countarraylist = 0; countarraylist < endcolumn; countarraylist++)
                {
                    /*byte[] actualx = new byte[] { Convert.ToByte((int)fontxarray[countarraylist] + xmove)};

                    byte[] actualy = new byte[] { Convert.ToByte((int)fontyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                    byte[] actualcolor = new byte[] { Convert.ToByte(fontcolorarray[countarraylist])};*/
                    //string[] words = Convert.ToString(fontallarray[countarraylist]).Split(',');
                    int actualx = countarraylist + Convert.ToInt16(InputX.Text);

                    int actualy = Convert.ToInt16(InputY.Text);
                    serialPort1.Write(actualx.ToString());
                    serialPort1.Write(",");
                    serialPort1.Write(actualy.ToString() + ",");
                    if (textfrontcolor == 4 || textbackcolor == 4) { serialPort1.Write(fontallarray[countarraylist].ToString().Replace("4", randomcolor.ToString()) + ";"); }
                    else
                    { serialPort1.Write(fontallarray[countarraylist].ToString() + ";"); }
                    // serialPort1.Write(fontallarray[countarraylist].ToString() + ";");
                    serialPort1.ReadChar();

                    //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + ";");
                    //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + fontcolorarray[countarraylist] + "\n");
                    //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + "\n");
                    //System.Threading.Thread.Sleep(1);

                    //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + fontallarray[countarraylist].ToString() + ";\n");
                }
                //serialPort1.Write("c");()

            }
            else if (TextScrollX.Checked)
            {
                for (int xmove = X_MAX; xmove >= -lastxpixel; xmove--)
                {
                    if (xmove >= 0)
                    {
                        startcolumn = 0;
                    }
                    else
                    {
                        startcolumn = -xmove;
                    }
                    if ((-xmove + X_MAX + 1) >= fontallarray.Count)
                    {
                        endcolumn = fontallarray.Count;
                    }
                    else
                    {
                        endcolumn = -xmove + X_MAX + 1;
                    }
                    randomcolor = rnd.Next(1, 4);
                    for (int countarraylist = startcolumn; countarraylist < endcolumn; countarraylist++)
                    {
                        /*byte[] actualx = new byte[] { Convert.ToByte((int)fontxarray[countarraylist] + xmove)};

                        byte[] actualy = new byte[] { Convert.ToByte((int)fontyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                        byte[] actualcolor = new byte[] { Convert.ToByte(fontcolorarray[countarraylist])};*/


                        int actualx = countarraylist + xmove; 

                        int actualy = Convert.ToInt16(InputY.Text);
                        serialPort1.Write(actualx.ToString());
                        serialPort1.Write(",");
                        serialPort1.Write(actualy.ToString() + ",");
                        /*if (Convert.ToInt16(words[2]) == 5) { serialPort1.Write(xcolor[Convert.ToInt16(words[0])] + ";"); }
                        else
                        { serialPort1.Write(Convert.ToInt16(words[2]) + ";"); }*/

                        if (textfrontcolor == 4 || textbackcolor == 4) { serialPort1.Write(fontallarray[countarraylist].ToString().Replace("4", randomcolor.ToString()) + ";"); }
                        else
                        { serialPort1.Write(fontallarray[countarraylist].ToString() + ";"); }
                        //serialPort1.Write(fontallarray[countarraylist].ToString() + ";");
                        serialPort1.ReadChar();
                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + ";");
                        //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + fontcolorarray[countarraylist] + "\n");
                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + "\n");
                        //System.Threading.Thread.Sleep(1);

                        //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + fontcolorarray[countarraylist] + ";\n");
                    }
                    //serialPort1.Write("c");()
                }
            }
            else if (TextScrollY.Checked)
            {
                for (int ymove = Y_MAX; ymove >= -lastypixel; ymove--)
                {
                    if (X_MAX >= fontallarray.Count)
                    {
                        endcolumn = fontallarray.Count;
                    }
                    else
                    {
                        endcolumn = X_MAX;
                    }
                    randomcolor = rnd.Next(1, 4);
                    for (int countarraylist = 0; countarraylist < endcolumn; countarraylist++)
                    {
                        /*byte[] actualx = new byte[] { Convert.ToByte((int)fontxarray[countarraylist] + xmove)};

                        byte[] actualy = new byte[] { Convert.ToByte((int)fontyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                        byte[] actualcolor = new byte[] { Convert.ToByte(fontcolorarray[countarraylist])};*/

                        int actualx = countarraylist + Convert.ToInt16(InputX.Text);

                        int actualy = ymove;
                        serialPort1.Write(actualx.ToString());
                        serialPort1.Write(",");
                        serialPort1.Write(actualy.ToString() + ",");
                        /*if (Convert.ToInt16(words[2]) == 5) { serialPort1.Write(xcolor[Convert.ToInt16(words[0])] + ";"); }
                        else
                        { serialPort1.Write(Convert.ToInt16(words[2]) + ";"); }*/
                        if (textfrontcolor == 4 || textbackcolor == 4) { serialPort1.Write(fontallarray[countarraylist].ToString().Replace("4", randomcolor.ToString()) + ";"); }

                        else
                        { serialPort1.Write(fontallarray[countarraylist].ToString() + ";"); }
                        //serialPort1.Write(fontallarray[countarraylist].ToString() + ";");
                        serialPort1.ReadChar();


                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + ";");
                        //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + fontcolorarray[countarraylist] + "\n");
                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + fontcolorarray[countarraylist] + "\n");
                        //System.Threading.Thread.Sleep(1);

                        //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + fontcolorarray[countarraylist] + ";\n");
                    }
                    //serialPort1.Write("c");()
                }
            }
            /*for (int heightpixel = 0; heightpixel < flag2.Height; heightpixel++)
            {
                for (int widthpixel = 0; widthpixel < flag2.Width; widthpixel++)
                {
                    Color pixelColor = flag2.GetPixel(widthpixel, heightpixel);

                    String PixelwertText = pixelColor.R.ToString();
                    String PixelwertAllText = pixelColor.ToString();

                    if (flag2.GetPixel(widthpixel, heightpixel) == Color.FromArgb(255, 0, 0))
                    {
System.Threading.Thread.Sleep(3);
                        String SendtoArduino = widthpixel.ToString() + "," + heightpixel.ToString() + ",2;";
                        serialPort1.Write(SendtoArduino);
                        richTextBox1.AppendText(SendtoArduino);
                        //System.Threading.Thread.Sleep(3);
                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "." + PixelwertText + "." + PixelwertAllText + "\n");
                    }
                }
            }*/
            /* int xa = 0;
             while (xa < 1)
             {
                 int xpos = 32;
                 while (xpos > (-1 * (image1.Width)))
                 {
                     for (int i = 0; i < 1; i++)
                     {
                        for (int heightpixel = 0; heightpixel < 16; heightpixel++)
                         {
                             Color pixelColor = image1.GetPixel(xpos + (-image1.Width * i), heightpixel);
                         System.Threading.Thread.Sleep(30);
                         //String PixelwertText = pixelColor.R.ToString();
                         String PixelwertAllText = pixelColor.ToString();
                         int hpixel = heightpixel ;
                         int wpixel = xpos + (image1.Width *i)  ;
                         //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "."  + PixelwertAllText + "\n");
                         String SendtoArduino = wpixel.ToString() + "," + hpixel.ToString() + "," + PixelwertAllText.Replace("Color [A=255, R=3, G=104, B=30]", "1").Replace("Color [A=255, R=252, G=206, B=4]", "3").Replace("Color [A=255, R=205, G=65, B=12]", "2") + ";";
                         serialPort1.Write(SendtoArduino);
                         richTextBox1.AppendText(SendtoArduino);
                        }
                        
                     }
                      System.Threading.Thread.Sleep(30);// reduce speed of scroll
                     xpos--;
                 }
                 xa = 1;
             }*/
            /*int scrollxcounter = 0;
            int scrollxpixel= 0;
            for (int scrollypixel = 1; scrollypixel < 6; scrollypixel++)
            {

                for (int widthpixel = 0; widthpixel < image1.Width; widthpixel++)
                {

                    //for (int scrollxpixel = 0; scrollxpixel < 31; scrollxpixel++)                {
                    for (int heightpixel = 0; heightpixel < 16; heightpixel++)
                    {



                        Color pixelColor = image1.GetPixel(widthpixel, heightpixel * scrollypixel);
                        System.Threading.Thread.Sleep(25);
                        //String PixelwertText = pixelColor.R.ToString();
                        String PixelwertAllText = pixelColor.ToString();
                        int hpixel = heightpixel;
                        int wpixel = widthpixel - scrollxpixel;
                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "."  + PixelwertAllText + "\n");
                        String SendtoArduino = wpixel.ToString() + "," + hpixel.ToString() + "," + PixelwertAllText.Replace("Color [A=255, R=3, G=104, B=30]", "1").Replace("Color [A=255, R=252, G=206, B=4]", "3").Replace("Color [A=255, R=205, G=65, B=12]", "2") + ";";
                        serialPort1.Write(SendtoArduino);
                        richTextBox1.AppendText(SendtoArduino);

                        //}
                        //System.Threading.Thread.Sleep(30);

                    }
                    if ((widthpixel % 32) == 0)
                    {
                        scrollxcounter = widthpixel / 32;
                        scrollxpixel = scrollxcounter * 32;
                    }
                }
            }*/
            /*for (int scrollxpixel = 0; scrollxpixel < 31; scrollxpixel--)
            {  
                    for (int widthpixel = 0; widthpixel <32; widthpixel++)
                    {
                        for (int heightpixel = 0; heightpixel < 16; heightpixel++)
                        {
              
                                                

                                  Color pixelColor = image1.GetPixel(widthpixel * scrollxpixel, heightpixel);
                        System.Threading.Thread.Sleep(30);
                        //String PixelwertText = pixelColor.R.ToString();
                        String PixelwertAllText = pixelColor.ToString();
                        int hpixel = heightpixel ;
                        int wpixel = widthpixel  ;
                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "."  + PixelwertAllText + "\n");
                        String SendtoArduino = wpixel.ToString() + "," + hpixel.ToString() + "," + PixelwertAllText.Replace("Color [A=255, R=3, G=104, B=30]", "1").Replace("Color [A=255, R=252, G=206, B=4]", "3").Replace("Color [A=255, R=205, G=65, B=12]", "2") + ";";
                        serialPort1.Write(SendtoArduino);
                        richTextBox1.AppendText(SendtoArduino);
                        
                    }
                        
                }
                        System.Threading.Thread.Sleep(100);
            }*/

            /* while (widthpixel <= textBox1.Text.Length * 8)
             {
                 while (heightpixel <= 16)
                 {
                     Color pixelColor =flag.GetPixel(widthpixel, heightpixel);
                     String PixelwertText = pixelColor.ToString();
                    /* if (PixelwertText != "Red")
                     {
                         serialPort1.Write(widthpixel.ToString() + "," + heightpixel.ToString() + ",2;");
                     }
                     richTextBox1.Text = widthpixel.ToString();
                     //flagGraphics.DrawString(PixelwertText, font, System.Drawing.Brushes.Red, 10, 20);
                 }
             }*/

        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (!serialPort1.IsOpen) return;

            String colorstring = "";
            for (int nmove = 0; nmove <= 15; nmove++)
            {
                for (int xmove = 0; xmove <= 32; xmove++)
                {
                    for (int ymove = 0; ymove <= 15; ymove++)
                    {
                        colorstring = colorstring + rnd.Next(0, 5).ToString();
                    }
                    serialPort1.Write("dr,");
                    serialPort1.Write(xmove.ToString());
                    serialPort1.Write(",");
                    serialPort1.Write("0,");
                    serialPort1.WriteLine(colorstring + ";");

                    //richTextBox1.AppendText(xmove.ToString() + ",0,"  + colorstring + ";\n");

                    colorstring = "";
                    /*while (serialPort1.BytesToRead < 0)
                     {
                         //System.Threading.Thread.Sleep(3);
                       
                     }*/
                    serialPort1.ReadChar();
                    //richTextBox1.AppendText(serialPort1.ReadChar().ToString());
                }
            }

        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (!serialPort1.IsOpen) return;
            Random rnd = new Random();

            for (int nmove = 0; nmove <= 5; nmove++)
            {
                for (int xmove = 0; xmove <= 32; xmove++)
                {
                    for (int ymove = 0; ymove <= 15; ymove++)
                    {

                        serialPort1.Write(xmove.ToString());
                        serialPort1.Write(",");
                        serialPort1.Write(ymove.ToString() + ",");
                        serialPort1.Write(rnd.Next(0, 5) + ";");
                        serialPort1.ReadChar();
                    }


                    //richTextBox1.AppendText(xmove.ToString() + ",0,"  + colorstring + ";\n");


                    /*while (serialPort1.BytesToRead < 0)
                     {
                         //System.Threading.Thread.Sleep(3);
                       
                     }*/

                }
            }

        }

        private void NumberOfXMatrix_ValueChanged(object sender, EventArgs e)
        {
            X_MAX = 32 * (int)NumberOfXMatrix.Value - 1;
        }

        private void NumberOfYMatrix_ValueChanged(object sender, EventArgs e)
        {
            Y_MAX = 16 * (int)NumberOfXMatrix.Value - 1;
        }

        private void sendbitmapdata2_Click(object sender, EventArgs e)
        {
            if (!serialPort1.IsOpen) return;
            try
            {
                int test = Convert.ToInt32(InputX.Text);
            }
            catch
            {
                MessageBox.Show("Please insert only numbers at Input X");
                InputX.Text = "";
                return;
            }
            try
            {
                int test = Convert.ToInt32(InputY.Text);

            }
            catch
            {
                MessageBox.Show("Please insert only numbers at Input Y");
                InputY.Text = "";
                return;
            }
            //if (Convert.ToInt16(InputY.Text) < -Convert.ToInt16(bitmapyarray[0])) return;
            int startcolumn = 0, endcolumn = X_MAX, startline = 0, endline = Y_MAX;




            int randomcolor = rnd.Next(1, 4);
            if (BitmapColor0.SelectedIndex == -1 && BitmapColor1.SelectedIndex == -1 && BitmapColor2.SelectedIndex == -1 && BitmapColor3.SelectedIndex == -1 && BitmapColor4.SelectedIndex == -1 && BitmapColor5.SelectedIndex == -1 && BitmapColor6.SelectedIndex == -1 && BitmapColor7.SelectedIndex == -1 && BitmapColor8.SelectedIndex == -1 && BitmapColor9.SelectedIndex == -1)
            {
                MessageBox.Show("Please match the bitmap colors to the colors you want to display on the matrix");

                return;
            }

            if (BitmapShw.Checked)
            {
                if (Convert.ToInt16(InputX.Text) >= 0)
                {
                    startcolumn = 0;
                }
                else
                {
                    startcolumn = -Convert.ToInt16(InputX.Text);
                }
                if ((-Convert.ToInt16(InputX.Text) + X_MAX + 1) >= bitmapcolorarray.Count)
                {
                    endcolumn = bitmapcolorarray.Count;
                }
                else
                {
                    endcolumn = -Convert.ToInt16(InputX.Text) + X_MAX+1;
                }
                if (Convert.ToInt16(InputY.Text) >= 0)
                {
                    startline = 0;
                }
                else
                {
                    startline = -Convert.ToInt16(InputY.Text);
                }
                if ((startline + Y_MAX+1) >= Convert.ToInt16(bitmapyarray[0]))
                {
                    endline = Convert.ToInt16(bitmapyarray[0]) - startline;
                }
                else
                {
                    endline = Y_MAX+1;
                }
                if (endcolumn > bitmapcolorarray.Count) { endcolumn = bitmapcolorarray.Count; }
                //if (endline > (Convert.ToInt16(bitmapyarray[0])-1)) { endline = Convert.ToInt16(bitmapyarray[0])-1; }
                if (startline >= (Convert.ToInt16(bitmapyarray[0])-1)) { return; }
                richTextBox1.AppendText(bitmapyarray[0].ToString()+" "+endline.ToString() + " " + startline.ToString() + ";\n");
                for (int countarraylist = 0; countarraylist < endcolumn; countarraylist++)
                {
                    /*byte[] actualx = new byte[] { Convert.ToByte((int)bitmapxarray[countarraylist] + xmove)};

                    byte[] actualy = new byte[] { Convert.ToByte((int)bitmapyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                    byte[] actualcolor = new byte[] { Convert.ToByte(bitmapcolorarray[countarraylist])};*/
                    //int actualcolor = 0;
                    int actualx = countarraylist + Convert.ToInt16(InputX.Text);

                    int actualy = Convert.ToInt16(InputY.Text) + startline;
                    String colorstring = "";
                    String wholecolorstring = bitmapcolorarray[countarraylist].ToString();
                    String[] allcolorstring = wholecolorstring.ToString().Split(';');
                    //richTextBox1.AppendText(wholecolorstring + ";\n");
                    foreach (string s in allcolorstring)
                    {
                        //richTextBox1.AppendText(s + ";\n");


                        if (s == bitmapusedallcolorarray[0].ToString() && BitmapColor0.SelectedIndex != -1)
                        {
                            colorstring = colorstring + BitmapColor0.SelectedIndex.ToString();


                        }
                        else if (s == bitmapusedallcolorarray[1].ToString() && BitmapColor1.SelectedIndex != -1)
                        {
                            colorstring = colorstring + BitmapColor1.SelectedIndex.ToString();

                        }
                        else if (s == bitmapusedallcolorarray[2].ToString() && BitmapColor2.SelectedIndex != -1)
                        {
                            colorstring = colorstring + BitmapColor2.SelectedIndex.ToString();

                        }
                        else if (s == bitmapusedallcolorarray[3].ToString() && BitmapColor3.SelectedIndex != -1)
                        {
                            colorstring = colorstring + BitmapColor3.SelectedIndex.ToString();
                            //actualcolor = 1;
                        }
                        else if (s == bitmapusedallcolorarray[4].ToString() && BitmapColor4.SelectedIndex != -1)
                        {
                            colorstring = colorstring + BitmapColor4.SelectedIndex.ToString();
                            //actualcolor = 1;
                        }
                        else if (s == bitmapusedallcolorarray[5].ToString() && BitmapColor5.SelectedIndex != -1)
                        {
                            colorstring = colorstring + BitmapColor5.SelectedIndex.ToString();
                            //actualcolor = 1;
                        }
                        else if (s == bitmapusedallcolorarray[6].ToString() && BitmapColor6.SelectedIndex != -1)
                        {
                            colorstring = colorstring + BitmapColor6.SelectedIndex.ToString();
                            //actualcolor = 1;
                        }
                        else if (s == bitmapusedallcolorarray[7].ToString() && BitmapColor7.SelectedIndex != -1)
                        {
                            colorstring = colorstring + BitmapColor7.SelectedIndex.ToString();

                        }
                        else if (s == bitmapusedallcolorarray[8].ToString() && BitmapColor8.SelectedIndex != -1)
                        {
                            colorstring = colorstring + BitmapColor8.SelectedIndex.ToString();

                        }
                        else if (s == bitmapusedallcolorarray[9].ToString() && BitmapColor9.SelectedIndex != -1)
                        {
                            colorstring = colorstring + BitmapColor9.SelectedIndex.ToString();

                        }
                        else 
                        {
                            colorstring = colorstring + "0";

                        }








                    }
                   serialPort1.Write(actualx.ToString());
                    serialPort1.Write(",");
                    serialPort1.Write(actualy.ToString() + ",");
                    serialPort1.Write(colorstring.Substring(startline, endline) + ";");
                    serialPort1.ReadChar();

                    richTextBox1.AppendText(actualy.ToString()+""+colorstring.Substring(startline, endline) + ";\n");
                    colorstring = "";
                    //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + actualcolor.ToString() + ";\n");

                    /*  if ((int)bitmapcolorarray[countarraylist] == 5) { serialPort1.Write(xcolor[(int)bitmapxarray[countarraylist]] + ";"); }
                      else
                      { serialPort1.Write(bitmapcolorarray[countarraylist] + ";"); }*/


                    //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + ";");
                    //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + bitmapcolorarray[countarraylist] + "\n");
                    //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + "\n");
                    //System.Threading.Thread.Sleep(1);

                    // richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + bitmapcolorarray[countarraylist] + ";\n");
                }
                //serialPort1.Write("c");()

            }
            else if (BitmapScrollX.Checked)
            {
                for (int xmove = X_MAX; xmove >= -Convert.ToInt16(bitmapxarray[0]); xmove--)
                {
                    if (xmove >= 0)
                    {
                        startcolumn = 0;
                    }
                    else
                    {
                        startcolumn = -xmove;
                    }
                    if ((-xmove + X_MAX + 1) >= bitmapcolorarray.Count)
                    {
                        endcolumn = bitmapcolorarray.Count;
                    }
                    else
                    {
                        endcolumn = -xmove + X_MAX + 1;
                    }
                    if (Convert.ToInt16(InputY.Text) >= 0)
                    {
                        startline = 0;
                    }
                    else
                    {
                        startline = -Convert.ToInt16(InputY.Text);
                    }
                    if ((startline + Y_MAX) >= Convert.ToInt16(bitmapyarray[0]))
                    {
                        endline = Convert.ToInt16(bitmapyarray[0]) - startline;
                    }
                    else
                    {
                        endline = Y_MAX+1;
                    }
                
                    if (endcolumn > bitmapcolorarray.Count) { endcolumn = bitmapcolorarray.Count; }
                    if (startline >= (Convert.ToInt16(bitmapyarray[0]))) { return; }
                    //if (endline > Convert.ToInt16(bitmapyarray[0])) { endline = Convert.ToInt16(bitmapyarray[0]); }
                    for (int countarraylist = startcolumn; countarraylist < endcolumn; countarraylist++)
                    {
                        /*byte[] actualx = new byte[] { Convert.ToByte((int)bitmapxarray[countarraylist] + xmove)};

                        byte[] actualy = new byte[] { Convert.ToByte((int)bitmapyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                        byte[] actualcolor = new byte[] { Convert.ToByte(bitmapcolorarray[countarraylist])};*/

                        int actualx = countarraylist + xmove;

                        int actualy = Convert.ToInt16(InputY.Text) + startline;
                        String colorstring = "";
                        String wholecolorstring = bitmapcolorarray[countarraylist].ToString();
                        String[] allcolorstring = wholecolorstring.ToString().Split(';');
                        //richTextBox1.AppendText(wholecolorstring + ";\n");
                        foreach (string s in allcolorstring)
                        {
                            //richTextBox1.AppendText(s + ";\n");


                            if (s == bitmapusedallcolorarray[0].ToString() && BitmapColor0.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor0.SelectedIndex.ToString();


                            }
                            else if (s == bitmapusedallcolorarray[1].ToString() && BitmapColor1.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor1.SelectedIndex.ToString();

                            }
                            else if (s == bitmapusedallcolorarray[2].ToString() && BitmapColor2.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor2.SelectedIndex.ToString();

                            }
                            else if (s == bitmapusedallcolorarray[3].ToString() && BitmapColor3.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor3.SelectedIndex.ToString();
                                //actualcolor = 1;
                            }
                            else if (s == bitmapusedallcolorarray[4].ToString() && BitmapColor4.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor4.SelectedIndex.ToString();
                                //actualcolor = 1;
                            }
                            else if (s == bitmapusedallcolorarray[5].ToString() && BitmapColor5.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor5.SelectedIndex.ToString();
                                //actualcolor = 1;
                            }
                            else if (s == bitmapusedallcolorarray[6].ToString() && BitmapColor6.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor6.SelectedIndex.ToString();
                                //actualcolor = 1;
                            }
                            else if (s == bitmapusedallcolorarray[7].ToString() && BitmapColor7.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor7.SelectedIndex.ToString();

                            }
                            else if (s == bitmapusedallcolorarray[8].ToString() && BitmapColor8.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor8.SelectedIndex.ToString();

                            }
                            else if (s == bitmapusedallcolorarray[9].ToString() && BitmapColor9.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor9.SelectedIndex.ToString();

                            }
                            else
                            {
                                colorstring = colorstring + "0";

                            }








                        }
                        serialPort1.Write(actualx.ToString());
                        serialPort1.Write(",");
                        serialPort1.Write(actualy.ToString() + ",");
                        serialPort1.Write(colorstring.Substring(startline, endline) + ";");
                        serialPort1.ReadChar();

                        //richTextBox1.AppendText(colorstring.Substring(startline,endline) + ";\n");
                        colorstring = "";
                        /* if ((int)bitmapcolorarray[countarraylist] == 5) { serialPort1.Write(xcolor[(int)bitmapxarray[countarraylist]] + ";"); }
                             else
                             { serialPort1.Write(bitmapcolorarray[countarraylist] + ";"); }*/


                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + ";");
                        //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + bitmapcolorarray[countarraylist] + "\n");
                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + "\n");
                        //System.Threading.Thread.Sleep(1);

                        //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + bitmapcolorarray[countarraylist] + ";\n");
                    }
                    //serialPort1.Write("c");()
                }
            }
            else if (BitmapScrollY.Checked)
            {
                for (int ymove = Y_MAX; ymove >= -Convert.ToInt16(bitmapyarray[0]); ymove--)
                {
                    if (Convert.ToInt16(InputX.Text) >= 0)
                    {
                        startcolumn = 0;
                    }
                    else
                    {
                        startcolumn = -Convert.ToInt16(InputX.Text);
                    }
                    if ((-Convert.ToInt16(InputX.Text) + X_MAX + 1) >= bitmapcolorarray.Count)
                    {
                        endcolumn = bitmapcolorarray.Count;
                    }
                    else
                    {
                        endcolumn = -Convert.ToInt16(InputX.Text) + X_MAX + 1;
                    }
                    if (ymove >= 0)
                    {
                        startline = 0;
                    }
                    else
                    {
                        startline = -ymove;
                    }
                    if ((-ymove + Y_MAX + 1) >= Convert.ToInt16(bitmapyarray[0]))
                    {
                        endline = Convert.ToInt16(bitmapyarray[0]) - startline;
                    }
                    else
                    {
                        endline =  Y_MAX +1;
                    }

                    
                    if (endcolumn > bitmapcolorarray.Count) { endcolumn = bitmapcolorarray.Count; }
                    if (endline > Convert.ToInt16(bitmapyarray[0])) { endline = Convert.ToInt16(bitmapyarray[0]); }

                    for (int countarraylist = startcolumn; countarraylist < endcolumn; countarraylist++)
                    {
                        /*byte[] actualx = new byte[] { Convert.ToByte((int)bitmapxarray[countarraylist] + xmove)};

                        byte[] actualy = new byte[] { Convert.ToByte((int)bitmapyarray[countarraylist] + Convert.ToInt16(InputY.Text)) };
                        byte[] actualcolor = new byte[] { Convert.ToByte(bitmapcolorarray[countarraylist])};*/

                        int actualx = countarraylist+Convert.ToInt16(InputX.Text);

                        int actualy = ymove + startline;
                        String colorstring = "";
                        String wholecolorstring = bitmapcolorarray[countarraylist].ToString();
                        String[] allcolorstring = wholecolorstring.ToString().Split(';');
                        //richTextBox1.AppendText(wholecolorstring + ";\n");
                        foreach (string s in allcolorstring)
                        {
                            //richTextBox1.AppendText(s + ";\n");


                            if (s == bitmapusedallcolorarray[0].ToString() && BitmapColor0.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor0.SelectedIndex.ToString();


                            }
                            else if (s == bitmapusedallcolorarray[1].ToString() && BitmapColor1.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor1.SelectedIndex.ToString();

                            }
                            else if (s == bitmapusedallcolorarray[2].ToString() && BitmapColor2.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor2.SelectedIndex.ToString();

                            }
                            else if (s == bitmapusedallcolorarray[3].ToString() && BitmapColor3.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor3.SelectedIndex.ToString();
                                //actualcolor = 1;
                            }
                            else if (s == bitmapusedallcolorarray[4].ToString() && BitmapColor4.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor4.SelectedIndex.ToString();
                                //actualcolor = 1;
                            }
                            else if (s == bitmapusedallcolorarray[5].ToString() && BitmapColor5.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor5.SelectedIndex.ToString();
                                //actualcolor = 1;
                            }
                            else if (s == bitmapusedallcolorarray[6].ToString() && BitmapColor6.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor6.SelectedIndex.ToString();
                                //actualcolor = 1;
                            }
                            else if (s == bitmapusedallcolorarray[7].ToString() && BitmapColor7.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor7.SelectedIndex.ToString();

                            }
                            else if (s == bitmapusedallcolorarray[8].ToString() && BitmapColor8.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor8.SelectedIndex.ToString();

                            }
                            else if (s == bitmapusedallcolorarray[9].ToString() && BitmapColor9.SelectedIndex != -1)
                            {
                                colorstring = colorstring + BitmapColor9.SelectedIndex.ToString();

                            }
                            else
                            {
                                colorstring = colorstring + "0";

                            }








                        }
                        serialPort1.Write(actualx.ToString());
                        serialPort1.Write(",");
                        serialPort1.Write(actualy.ToString() + ",");
                        serialPort1.Write(colorstring.Substring(startline, endline) + ";");
                        serialPort1.ReadChar();
                        richTextBox1.AppendText(endline + " " + bitmapyarray[0].ToString() + ";\n");
                        //richTextBox1.AppendText(colorstring.Substring(startline,endline) + ";\n");
                        colorstring = "";
                        /*  if ((int)bitmapcolorarray[countarraylist] == 5) { serialPort1.Write(xcolor[(int)bitmapxarray[countarraylist]] + ";"); }
                          else
                          { serialPort1.Write(bitmapcolorarray[countarraylist] + ";"); }*/


                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + ";");
                        //serialPort1.WriteLine(enc.GetBytes(actualx.ToString()) + "," + enc.GetBytes(actualy.ToString()) + "," + bitmapcolorarray[countarraylist] + "\n");
                        //serialPort1.WriteLine(actualx.ToString() + "," + actualy.ToString() + "," + bitmapcolorarray[countarraylist] + "\n");
                        //System.Threading.Thread.Sleep(1);

                        //richTextBox1.AppendText(actualx.ToString() + "," + actualx.ToString() + "," + bitmapcolorarray[countarraylist] + ";\n");
                    }
                    //serialPort1.Write("c");()
                }
            }

        }

        private void Bitmapopener2_Click(object sender, EventArgs e)
        {
            bitmapxarray.Clear();
            bitmapyarray.Clear();
            bitmapcolorarray.Clear();
            bitmapusedcolorarray.Clear();
            bitmapusedallcolorarray.Clear();
            openFileDialog1.Filter = "JPG Image (*.jpg, *.jpeg, *.jpe, *.jfif)|*.jpg;*.jpeg;*.jpe;*.jfif|Bitmap Image|*.bmp|Gif Image (*.gif)|*.gif|PNG Files (*.png)|*.png|All Files|*.*";
            openFileDialog1.FileName = "";
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {


                //pictureBox1.Image = Image.FromFile(openFileDialog1.FileName,true);
                Bitmap image1 = new Bitmap(openFileDialog1.FileName, true);
                image1.RotateFlip(RotateFlipType.Rotate90FlipX);
                pictureBox1.Image = image1;

                bitmapxarray.Add(image1.Height);
                bitmapyarray.Add(image1.Width);
                String colorstring = "";
                //for (int scrollxpixel = 0; scrollxpixel < 31; scrollxpixel++)                {
                for (int heightpixel = 0; heightpixel < image1.Height; heightpixel++)
                {

                    for (int widthpixel = 0; widthpixel < image1.Width; widthpixel++)
                    {

                        Color pixelColor = image1.GetPixel(widthpixel, heightpixel);
                        //System.Threading.Thread.Sleep(25);
                        //String PixelwertText = pixelColor.R.ToString();
                        String PixelwertAllText = pixelColor.ToString();
                        //int hpixel = heightpixel;
                        //int wpixel = widthpixel;

                        colorstring = colorstring + PixelwertAllText + ";";
                        bitmapusedcolorarray.Add(PixelwertAllText);
                        //richTextBox1.AppendText(widthpixel.ToString() + "." + heightpixel.ToString() + "."  + PixelwertAllText + "\n");
                        //String SendtoArduino = wpixel.ToString() + "," + hpixel.ToString() + "," + PixelwertAllText.Replace("Color [A=255, R=3, G=104, B=30]", "1").Replace("Color [A=255, R=252, G=206, B=4]", "3").Replace("Color [A=255, R=205, G=65, B=12]", "2") + ";";
                        //serialPort1.Write(SendtoArduino);
                        //richTextBox1.AppendText(SendtoArduino);

                        //}
                        //System.Threading.Thread.Sleep(30);

                    }
                    bitmapcolorarray.Add(colorstring);
                    colorstring = "";
                }
                bitmapusedcolorarray.Sort();
                String oldcolortext = "", actualcolortext = "";
                int usedcolors = 0;

                for (int countarraylist = 0; countarraylist < bitmapusedcolorarray.Count; countarraylist++)
                {
                    actualcolortext = bitmapusedcolorarray[countarraylist].ToString();
                    if (oldcolortext != actualcolortext)
                    {
                        //BitmapColor1.Items.Add(bitmapusedcolorarray[countarraylist]);
                        string[] oldcolortextdifferent = actualcolortext.Split(',');
                        switch (usedcolors)
                        {
                            case 0:
                                cl0label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 1:
                                cl1label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 2:
                                cl2label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 3:
                                cl3label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;

                            case 4:
                                cl4label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 5:
                                cl5label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 6:
                                cl6label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 7:
                                cl7label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 8:
                                cl8label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                            case 9:
                                cl9label.BackColor = Color.FromArgb(Convert.ToInt16(oldcolortextdifferent[1].Replace(" R=", "")), Convert.ToInt16(oldcolortextdifferent[2].Replace(" G=", "")), Convert.ToInt16(oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "")));
                                break;
                        }
                        oldcolortext = bitmapusedcolorarray[countarraylist].ToString();
                        usedcolors = usedcolors + 1;
                        bitmapusedallcolorarray.Add(bitmapusedcolorarray[countarraylist]);
                        //richTextBox1.AppendText(bitmapusedcolorarray[countarraylist].ToString());
                        /*BitmapColor2.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapColor5.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapOrange.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapColor3.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapRandomColumnColor.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapRandomLineColor.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapRandomRedGreen.Items.Add(bitmapusedcolorarray[countarraylist]);
                        BitmapColor4.Items.Add(bitmapusedcolorarray[countarraylist]);
                      */
                        //richTextBox1.AppendText(oldcolortextdifferent[1].Replace(" R=", "") + " " + oldcolortextdifferent[2].Replace(" G=", "") + " " + oldcolortextdifferent[3].Replace(" B=", "").Replace("]", "") + "\n");

                    }
                }
                if (bitmapusedallcolorarray.Count < 10)
                {
                    for (int countarraylist = bitmapusedallcolorarray.Count; countarraylist < 10; countarraylist++)
                    {
                        bitmapusedallcolorarray.Add("Color [A=255, R=255, G=255, B=255]");
                    }
                }


            }
        }

       

       








    }











}

